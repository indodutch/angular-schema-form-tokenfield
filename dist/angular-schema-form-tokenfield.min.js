angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/tokenfield/angular-schema-form-tokenfield.html",'<div class="form-group schema-form-{{form.type}} {{form.htmlClass}}" sf-field-model="sf-new-array" sf-new-array="tokenfield.modelValue" schema-validate="form" data-ng-controller="angularBootstrapTokenfieldController" data-ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }" data-ng-model="tokenfield.modelValue">\n  <label class="control-label {{form.labelHtmlClass}}" data-ng-class="{\'sr-only\': !showTitle()}">{{form.title}}</label>\n    <input tokens="form.tokens" limit="form.limit" min-length="form.minLength" min-width="form.minWidth" show-autocomplete-on-focus="form.showAutocompleteOnFocus" autocomplete="form.autocomplete" create-tokens-on-blur="form.createTokensOnBlur" delimiter="form.delimiter" beautify="form.beautify" input-type="form.schema.items.type" type="form.schema.items.type" angular-bootstrap-tokenfield="" data-ng-model="tokenfield.viewValue">\n\n    <div class="help-block" sf-message="form.description"></div>\n\n</div>')}]);
!function(){"use strict";angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider","sfBuilderProvider",function(e,t,a,n){var o=function(t,n,o){if("array"===n.type&&"tokenfield"===n.format){var i=n.items;if("object"!==i.type&&"array"!==i.type){var l=e.stdFormObj(t,n,o);return l.key=o.path,l.type="tokenfield",l.validationMessage={100:"Value is not a multiple of {{schema.items.multipleOf}}",101:"{{value}} contains an item that is less than the minimum of {{schema.items.minimum}}",102:"{{value}} contains an item that is equal to the exclusive minimum {{schema.items.minimum}}",103:"{{value}} contains an item that is greater than the allowed maximum of {{schema.items.maximum}}",104:"{{value}} contains an item that is equal to the exclusive maximum {{schema.items.maximum}}",105:"{{value}} contains an item that is not a valid number",200:"{{value}} contains a string that is too short, minimum {{schema.items.minLength}}",201:"{{value}} contains a string that is too long ({{value.length}} chars), maximum {{schema.items.maxLength}}",202:"{{value}} contains a string that does not match pattern: {{schema.items.pattern}}"},o.lookup[a.stringify(o.path)]=l,l}console.warn("Cannot use tokenfield for arrays of arrays or objects")}};e.defaults.array.unshift(o),t.defineAddOn("bootstrapDecorator","tokenfield","directives/decorators/bootstrap/tokenfield/angular-schema-form-tokenfield.html",n.stdBuilders)}]),angular.module("schemaForm").controller("angularBootstrapTokenfieldController",["$scope",function(e){e.tokenfield={viewValue:"",modelValue:[]},e.parseValue=function(t){var a=e.form.schema.items.type;return"number"===a||"integer"===a?Number(t):"boolean"===a?Boolean(t):t},e.$watch(function(){return e.tokenfield.viewValue},function(t,a){console.log("Tokenfield value changed from: "+a+"  to: "+t),"string"==typeof t?t.indexOf(",")>=0?e.tokenfield.modelValue=t.split(",").map(function(t){return e.parseValue(t)}):t.length>0?(e.tokenfield.modelValue=[],e.tokenfield.modelValue.push(e.parseValue(t))):e.tokenfield.modelValue=[]:e.tokenfield.modelValue=t})}]),angular.module("schemaForm").directive("angularBootstrapTokenfield",function(){return{restrict:"A",scope:{tokens:"=",limit:"=",minLength:"=",minWidth:"=",showAutocompleteOnFocus:"=",autocomplete:"=",createTokensOnBlur:"=",delimiter:"=",beautify:"=",inputType:"=",schemaFormModel:"="},link:function(e,t,a,n){t.tokenfield(e)[0];e.original=t[0],e.tokenInput=t.siblings(".token-input")[0],e.tokenInput.placeholder="",e.$watch(function(){return t[0]},function(){e.tokenInput.placeholder=e.original.placeholder})}}})}();