angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/tokenfield/angular-schema-form-tokenfield.html",'<div class="form-group schema-form-{{form.type}} {{form.htmlClass}}" data-ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }">\n  <label class="control-label {{form.labelHtmlClass}}" for="{{form.key.slice(-1)[0]}}" data-ng-class="{\'sr-only\': !showTitle()}">{{form.title}}</label>\n\n  <input type="{{form.type}}" step="any" sf-changed="form" placeholder="{{form.placeholder}}" class="form-control {{form.fieldHtmlClass}}" id="{{ form.key.slice(-1)[0] }}" name="{{ form.key.slice(-1)[0] }}" aria-describedby="{{ form.key.slice(-1)[0] + \'Status\' }}" sf-field-model="" angular-bootstrap-tokenfield="" schema-validate="form" tokens="form.tokens" limit="form.limit" min-length="form.minLength" min-width="form.minWidth" show-autocomplete-on-focus="form.showAutocompleteOnFocus" autocomplete="form.autocomplete" create-tokens-on-blur="form.createTokensOnBlur" delimiter="form.delimiter" beautify="form.beautify" input-type="form.schema.items.type" data-ng-if="!form.fieldAddonLeft && !form.fieldAddonRight" data-ng-show="form.key" data-ng-model="$$value$$" data-ng-disabled="form.readonly">\n\n  <span class="form-control-feedback" aria-hidden="true" data-ng-if="form.feedback !== false" data-ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span>\n\n  <span id="{{form.key.slice(-1)[0] + \'Status\'}}" class="sr-only" data-ng-if="hasError() || hasSuccess()">{{ hasSuccess() ? \'(success)\' : \'(error)\' }}</span>\n\n  <div class="help-block" sf-message="form.description"></div>\n\n</div>')}]);
!function(){"use strict";angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,r){var o=function(t,o,a){if("array"===o.type&&"tokenfield"===o.format){var n=e.stdFormObj(t,o,a);return n.key=a.path,n.type="tokenfield",n.schema.type="string",a.lookup[r.stringify(a.path)]=n,n}};e.defaults.array.unshift(o),t.addMapping("bootstrapDecorator","tokenfield","directives/decorators/bootstrap/tokenfield/angular-schema-form-tokenfield.html"),t.createDirective("tokenfield","directives/decorators/bootstrap/tokenfield/angular-schema-form-tokenfield.html")}]),angular.module("schemaForm").directive("angularBootstrapTokenfield",function(){return{restrict:"A",require:"^ngModel",scope:{tokens:"=",limit:"=",minLength:"=",minWidth:"=",showAutocompleteOnFocus:"=",autocomplete:"=",createTokensOnBlur:"=",delimiter:"=",beautify:"=",inputType:"="},link:function(e,t,r){var o=t.tokenfield(e)[0];e.original=t[0],e.tokenInput=t.siblings(".token-input")[0],e.tokenInput.placeholder="",e.$watch(function(){return t[0]},function(){e.tokenInput.placeholder=e.original.placeholder});var a=e.$parent.form.schema;$(o).on("tokenfield:createdtoken",function(t){console.log("New token created!");var r=t.attrs.value;"number"!==a.items.type&&"integer"!==a.items.type||(r=$.isNumeric(r)?Number(r):"");var o=tv4.validate(r,a.items);o||(e.$broadcast("schemaForm.error."+this.name,"tv4-0",tv4.error.message),e.$broadcast("schemaForm.error."+this.name,"tv4-0",!0),$(t.relatedTarget).addClass("invalid"))})}}})}();